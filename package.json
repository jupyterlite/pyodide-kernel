{
  "name": "@jupyterlite/pyodide-kernel-root",
  "version": "0.3.0",
  "private": true,
  "workspaces": {
    "packages": [
      "packages/*"
    ]
  },
  "scripts": {
    "build:prod": "lerna run --stream build:prod",
    "build:py": "lerna run --stream build:py",
    "build": "lerna run --stream build",
    "bump:js:version": "lerna version --no-push --force-publish --no-git-tag-version --yes",
    "clean:all": "jlpm clean:build && jlpm clean:dist && lerna run --stream clean:all && jlpm clean:cache",
    "clean:build": "rimraf build",
    "clean:cache": "rimraf node_modules/.cache build/.lite-cache examples/.jupyterlite.doit.db",
    "clean:dist": "rimraf dist",
    "clean": "lerna run --stream clean",
    "deduplicate": "yarn-berry-deduplicate -s fewer --fail",
    "dist:npm": "lerna run --stream dist",
    "dist:pypi": "pyproject-build .",
    "dist": "jlpm dist:pypi && jlpm dist:npm",
    "docs:lite": "cd examples && jupyter lite build",
    "docs:sphinx": "sphinx-build -W -b html docs build/docs",
    "docs": "jlpm docs:lite && jlpm docs:sphinx",
    "eslint:check": "eslint . --cache --cache-location=./build/.cache/eslint --ext .ts,.tsx",
    "eslint": "jlpm eslint:check --fix",
    "lint": "jlpm lint:js && jlpm lint:py",
    "lint:check": "jlpm lint:js:check && jlpm lint:py:check",
    "lint:js": "jlpm prettier && jlpm eslint",
    "lint:js:check": "jlpm prettier:check && jlpm eslint:check",
    "lint:py": "jlpm lint:py:ruff:fix",
    "lint:py:check": "jlpm lint:py:pip && jlpm lint:py:ruff:check",
    "lint:py:pip": "python -m pip check",
    "lint:py:ruff:fix": "ruff format && ruff check --fix-only",
    "lint:py:ruff:check": "ruff format --check",
    "prettier:base": "prettier \"**/*{.ts,.tsx,.js,.jsx,.css,.json,.md,.yml,.yaml}\"",
    "prettier:check": "jlpm prettier:base --check",
    "prettier": "jlpm prettier:base --write --list-different",
    "quickstart": "npm run setup:py && jlpm && jlpm deduplicate && jlpm clean:all && jlpm lint && jlpm build:prod && jlpm dist && jlpm docs && jlpm test",
    "serve": "cd build && python -m http.server -b 127.0.0.1",
    "setup:py": "python -m pip install -e \".[dev,lint,test,docs]\"",
    "test:py": "pytest",
    "test": "jlpm test:py"
  },
  "devDependencies": {
    "@typescript-eslint/eslint-plugin": "^6.7.0",
    "@typescript-eslint/parser": "^6.7.0",
    "eslint": "^8.49.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-prettier": "^5.0.0",
    "lerna": "^7.2.0",
    "prettier": "^3.0.3",
    "rimraf": "^5.0.1",
    "typescript": "~5.2.2",
    "yarn-berry-deduplicate": "^6.1.1"
  },
  "prettier": {
    "singleQuote": true,
    "printWidth": 88,
    "proseWrap": "always",
    "overrides": [
      {
        "files": "**/*tsconfig*.json",
        "options": {
          "trailingComma": "none"
        }
      }
    ]
  },
  "eslintConfig": {
    "ignorePatterns": [
      "**/__tests__/",
      "**/_pypi.ts",
      "**/*.d.ts",
      "**/lib/",
      "build/",
      "coverage",
      "dist/",
      "docs/",
      "node_modules/",
      "tests/"
    ],
    "extends": [
      "eslint:recommended",
      "plugin:@typescript-eslint/eslint-recommended",
      "plugin:@typescript-eslint/recommended",
      "plugin:prettier/recommended"
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
      "project": "tsconfigbase.json",
      "sourceType": "module"
    },
    "plugins": [
      "@typescript-eslint"
    ],
    "rules": {
      "@typescript-eslint/naming-convention": [
        "error",
        {
          "selector": "interface",
          "format": [
            "PascalCase"
          ],
          "custom": {
            "regex": "^I[A-Z]",
            "match": true
          }
        }
      ],
      "@typescript-eslint/no-unused-vars": [
        "warn",
        {
          "args": "none"
        }
      ],
      "@typescript-eslint/no-explicit-any": "off",
      "@typescript-eslint/no-namespace": "off",
      "@typescript-eslint/no-use-before-define": "off",
      "@typescript-eslint/quotes": [
        "error",
        "single",
        {
          "avoidEscape": true,
          "allowTemplateLiterals": false
        }
      ],
      "curly": [
        "error",
        "all"
      ],
      "eqeqeq": "error",
      "prefer-arrow-callback": "error"
    }
  }
}
