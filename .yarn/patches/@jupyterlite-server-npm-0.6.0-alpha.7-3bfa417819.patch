diff --git a/lib/app.d.ts b/lib/app.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..b67509fb1d8408894611e2de21a8a7c5ada8818a
--- /dev/null
+++ b/lib/app.d.ts
@@ -0,0 +1,87 @@
+import { ServiceManager } from '@jupyterlab/services';
+import { Application, IPlugin } from '@lumino/application';
+import { Router } from './router';
+export type JupyterLiteServerPlugin<T> = IPlugin<JupyterLiteServer, T>;
+/**
+ * Server is the main application class. It is instantiated once and shared.
+ */
+export declare class JupyterLiteServer extends Application<never> {
+    /**
+     * Construct a new JupyterLite object.
+     *
+     * @param options The instantiation options for a JupyterLiteServer application.
+     */
+    constructor(options: Application.IOptions<never>);
+    /**
+     * The name of the application.
+     */
+    readonly name = "JupyterLite Server";
+    /**
+     * A namespace/prefix plugins may use to denote their provenance.
+     */
+    readonly namespace = "JupyterLite Server";
+    /**
+     * The version of the application.
+     */
+    readonly version = "unknown";
+    /**
+     * Get the underlying `Router` instance.
+     */
+    get router(): Router;
+    /**
+     * Get the underlying lite service manager for this app.
+     */
+    get serviceManager(): ServiceManager;
+    /**
+     * Handle an incoming request from the client.
+     *
+     * @param req The incoming request
+     * @param init The optional init request
+     */
+    fetch(req: RequestInfo, init?: RequestInit | null | undefined): Promise<Response>;
+    /**
+     * Attach the application shell to the DOM.
+     *
+     * @param id - The id of the host node for the shell, or `''`.
+     *
+     * #### Notes
+     * For this server application there is no shell to attach
+     */
+    protected attachShell(id: string): void;
+    /**
+     * A method invoked on a window `'resize'` event.
+     *
+     * #### Notes
+     * For this server application there is no shell to update
+     */
+    protected evtResize(event: Event): void;
+    /**
+     * Register plugins from a plugin module.
+     *
+     * @param mod - The plugin module to register.
+     */
+    registerPluginModule(mod: JupyterLiteServer.IPluginModule): void;
+    /**
+     * Register the plugins from multiple plugin modules.
+     *
+     * @param mods - The plugin modules to register.
+     */
+    registerPluginModules(mods: JupyterLiteServer.IPluginModule[]): void;
+    private _router;
+    private _serviceManager;
+}
+/**
+ * A namespace for Server statics.
+ */
+export declare namespace JupyterLiteServer {
+    /**
+     * The interface for a module that exports a plugin or plugins as
+     * the default value.
+     */
+    interface IPluginModule {
+        /**
+         * The default export.
+         */
+        default: IPlugin<JupyterLiteServer, any> | IPlugin<JupyterLiteServer, any>[];
+    }
+}
diff --git a/lib/app.js b/lib/app.js
new file mode 100644
index 0000000000000000000000000000000000000000..a9d2ff5a65a3994a0793c239922547583d49ba74
--- /dev/null
+++ b/lib/app.js
@@ -0,0 +1,120 @@
+// Copyright (c) Jupyter Development Team.
+// Distributed under the terms of the Modified BSD License.
+import { ServerConnection, ServiceManager } from '@jupyterlab/services';
+import { Application } from '@lumino/application';
+import { WebSocket } from 'mock-socket';
+import { Router } from './router';
+/**
+ * Server is the main application class. It is instantiated once and shared.
+ */
+export class JupyterLiteServer extends Application {
+    /**
+     * Construct a new JupyterLite object.
+     *
+     * @param options The instantiation options for a JupyterLiteServer application.
+     */
+    constructor(options) {
+        var _a;
+        super(options);
+        /**
+         * The name of the application.
+         */
+        this.name = 'JupyterLite Server';
+        /**
+         * A namespace/prefix plugins may use to denote their provenance.
+         */
+        this.namespace = this.name;
+        /**
+         * The version of the application.
+         */
+        this.version = 'unknown';
+        this._router = new Router();
+        const serverSettings = {
+            ...ServerConnection.makeSettings(),
+            WebSocket,
+            fetch: (_a = this.fetch.bind(this)) !== null && _a !== void 0 ? _a : undefined,
+        };
+        this._serviceManager = new ServiceManager({
+            standby: 'never',
+            serverSettings,
+        });
+    }
+    /**
+     * Get the underlying `Router` instance.
+     */
+    get router() {
+        return this._router;
+    }
+    /**
+     * Get the underlying lite service manager for this app.
+     */
+    get serviceManager() {
+        return this._serviceManager;
+    }
+    /**
+     * Handle an incoming request from the client.
+     *
+     * @param req The incoming request
+     * @param init The optional init request
+     */
+    async fetch(req, init) {
+        if (!(req instanceof Request)) {
+            throw Error('Request info is not a Request');
+        }
+        return this._router.route(req);
+    }
+    /**
+     * Attach the application shell to the DOM.
+     *
+     * @param id - The id of the host node for the shell, or `''`.
+     *
+     * #### Notes
+     * For this server application there is no shell to attach
+     */
+    attachShell(id) {
+        // no-op
+    }
+    /**
+     * A method invoked on a window `'resize'` event.
+     *
+     * #### Notes
+     * For this server application there is no shell to update
+     */
+    evtResize(event) {
+        // no-op
+    }
+    /**
+     * Register plugins from a plugin module.
+     *
+     * @param mod - The plugin module to register.
+     */
+    registerPluginModule(mod) {
+        let data = mod.default;
+        // Handle commonjs exports.
+        if (!Object.prototype.hasOwnProperty.call(mod, '__esModule')) {
+            data = mod;
+        }
+        if (!Array.isArray(data)) {
+            data = [data];
+        }
+        data.forEach((item) => {
+            try {
+                this.registerPlugin(item);
+            }
+            catch (error) {
+                console.error(error);
+            }
+        });
+    }
+    /**
+     * Register the plugins from multiple plugin modules.
+     *
+     * @param mods - The plugin modules to register.
+     */
+    registerPluginModules(mods) {
+        mods.forEach((mod) => {
+            this.registerPluginModule(mod);
+        });
+    }
+}
+//# sourceMappingURL=app.js.map
\ No newline at end of file
diff --git a/lib/app.js.map b/lib/app.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..d3d299f7ad08c74226f8a2ab4bab1d7a6a728b0a
--- /dev/null
+++ b/lib/app.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"app.js","sourceRoot":"","sources":["../src/app.ts"],"names":[],"mappings":"AAAA,0CAA0C;AAC1C,2DAA2D;AAE3D,OAAO,EAAE,gBAAgB,EAAE,cAAc,EAAE,MAAM,sBAAsB,CAAC;AAExE,OAAO,EAAE,WAAW,EAAW,MAAM,qBAAqB,CAAC;AAE3D,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AAExC,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAIlC;;GAEG;AACH,MAAM,OAAO,iBAAkB,SAAQ,WAAkB;IACvD;;;;OAIG;IACH,YAAY,OAAoC;;QAC9C,KAAK,CAAC,OAAO,CAAC,CAAC;QAYjB;;WAEG;QACM,SAAI,GAAG,oBAAoB,CAAC;QAErC;;WAEG;QACM,cAAS,GAAG,IAAI,CAAC,IAAI,CAAC;QAE/B;;WAEG;QACM,YAAO,GAAG,SAAS,CAAC;QAwFrB,YAAO,GAAG,IAAI,MAAM,EAAE,CAAC;QAhH7B,MAAM,cAAc,GAAG;YACrB,GAAG,gBAAgB,CAAC,YAAY,EAAE;YAClC,SAAS;YACT,KAAK,EAAE,MAAA,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,mCAAI,SAAS;SAC1C,CAAC;QACF,IAAI,CAAC,eAAe,GAAG,IAAI,cAAc,CAAC;YACxC,OAAO,EAAE,OAAO;YAChB,cAAc;SACf,CAAC,CAAC;IACL,CAAC;IAiBD;;OAEG;IACH,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED;;OAEG;IACH,IAAI,cAAc;QAChB,OAAO,IAAI,CAAC,eAAe,CAAC;IAC9B,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,KAAK,CACT,GAAgB,EAChB,IAAqC;QAErC,IAAI,CAAC,CAAC,GAAG,YAAY,OAAO,CAAC,EAAE;YAC7B,MAAM,KAAK,CAAC,+BAA+B,CAAC,CAAC;SAC9C;QACD,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACjC,CAAC;IAED;;;;;;;OAOG;IACO,WAAW,CAAC,EAAU;QAC9B,QAAQ;IACV,CAAC;IAED;;;;;OAKG;IACO,SAAS,CAAC,KAAY;QAC9B,QAAQ;IACV,CAAC;IAED;;;;OAIG;IACH,oBAAoB,CAAC,GAAoC;QACvD,IAAI,IAAI,GAAG,GAAG,CAAC,OAAO,CAAC;QACvB,2BAA2B;QAC3B,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,EAAE,YAAY,CAAC,EAAE;YAC5D,IAAI,GAAG,GAAU,CAAC;SACnB;QACD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACxB,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC;SACf;QACD,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;YACpB,IAAI;gBACF,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;aAC3B;YAAC,OAAO,KAAK,EAAE;gBACd,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;aACtB;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACH,qBAAqB,CAAC,IAAuC;QAC3D,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;YACnB,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;IACL,CAAC;CAIF"}
\ No newline at end of file
diff --git a/lib/router.d.ts b/lib/router.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..e2bfd0bd4daf228a0ab2221029f9e9adcdc21754
--- /dev/null
+++ b/lib/router.d.ts
@@ -0,0 +1,99 @@
+import { ReadonlyJSONObject } from '@lumino/coreutils';
+/**
+ * A simple router.
+ */
+export declare class Router {
+    /**
+     * Add a new GET route
+     *
+     * @param pattern The pattern to match
+     * @param callback The function to call on pattern match
+     *
+     */
+    get(pattern: string | RegExp, callback: Router.Callback): void;
+    /**
+     * Add a new PUT route
+     *
+     * @param pattern The pattern to match
+     * @param callback The function to call on pattern match
+     *
+     */
+    put(pattern: string | RegExp, callback: Router.Callback): void;
+    /**
+     * Add a new POST route
+     *
+     * @param pattern The pattern to match
+     * @param callback The function to call on pattern match
+     *
+     */
+    post(pattern: string | RegExp, callback: Router.Callback): void;
+    /**
+     * Add a new PATCH route
+     *
+     * @param pattern The pattern to match
+     * @param callback The function to call on pattern match
+     *
+     */
+    patch(pattern: string | RegExp, callback: Router.Callback): void;
+    /**
+     * Add a new DELETE route
+     *
+     * @param pattern The pattern to match
+     * @param callback The function to call on pattern match
+     *
+     */
+    delete(pattern: string | RegExp, callback: Router.Callback): void;
+    /**
+     * Route a request.
+     *
+     * @param req The request to route.
+     */
+    route(req: Request): Promise<Response>;
+    /**
+     * Add a new route.
+     *
+     * @param method The method
+     * @param pattern The pattern
+     * @param callback The callback
+     */
+    private _add;
+    private _routes;
+}
+/**
+ * A namespace for Router statics.
+ */
+export declare namespace Router {
+    /**
+     * The Callback type.
+     */
+    type Callback = (req: IRequest, ...args: string[]) => Promise<Response>;
+    /**
+     * The Method type.
+     */
+    type Method = 'GET' | 'PUT' | 'POST' | 'PATCH' | 'DELETE';
+    /**
+     * The interface for a parsed request
+     */
+    interface IRequest {
+        /**
+         * The path for the url.
+         */
+        pathname: string;
+        /**
+         * The optional query parameters.
+         */
+        query?: ReadonlyJSONObject;
+        /**
+         * The optional body parameters.
+         */
+        body?: ReadonlyJSONObject;
+    }
+    /**
+     * An interface for a route.
+     */
+    interface IRoute {
+        method: Method;
+        pattern: string | RegExp;
+        callback: Callback;
+    }
+}
diff --git a/lib/router.js b/lib/router.js
new file mode 100644
index 0000000000000000000000000000000000000000..8964171e55a034b45d7ca2e56c0cea8c62d4b48a
--- /dev/null
+++ b/lib/router.js
@@ -0,0 +1,111 @@
+/**
+ * A simple router.
+ */
+export class Router {
+    constructor() {
+        this._routes = [];
+    }
+    /**
+     * Add a new GET route
+     *
+     * @param pattern The pattern to match
+     * @param callback The function to call on pattern match
+     *
+     */
+    get(pattern, callback) {
+        this._add('GET', pattern, callback);
+    }
+    /**
+     * Add a new PUT route
+     *
+     * @param pattern The pattern to match
+     * @param callback The function to call on pattern match
+     *
+     */
+    put(pattern, callback) {
+        this._add('PUT', pattern, callback);
+    }
+    /**
+     * Add a new POST route
+     *
+     * @param pattern The pattern to match
+     * @param callback The function to call on pattern match
+     *
+     */
+    post(pattern, callback) {
+        this._add('POST', pattern, callback);
+    }
+    /**
+     * Add a new PATCH route
+     *
+     * @param pattern The pattern to match
+     * @param callback The function to call on pattern match
+     *
+     */
+    patch(pattern, callback) {
+        this._add('PATCH', pattern, callback);
+    }
+    /**
+     * Add a new DELETE route
+     *
+     * @param pattern The pattern to match
+     * @param callback The function to call on pattern match
+     *
+     */
+    delete(pattern, callback) {
+        this._add('DELETE', pattern, callback);
+    }
+    /**
+     * Route a request.
+     *
+     * @param req The request to route.
+     */
+    async route(req) {
+        const url = new URL(req.url);
+        const { method } = req;
+        const { pathname } = url;
+        for (const r of this._routes) {
+            if (r.method !== method) {
+                continue;
+            }
+            const match = pathname.match(r.pattern);
+            if (!match) {
+                continue;
+            }
+            const matches = match.slice(1);
+            let body;
+            if (r.method === 'PATCH' || r.method === 'PUT' || r.method === 'POST') {
+                try {
+                    body = JSON.parse(await req.text());
+                }
+                catch {
+                    body = undefined;
+                }
+            }
+            return r.callback.call(null, {
+                pathname,
+                body,
+                query: Object.fromEntries(url.searchParams),
+            }, ...matches);
+        }
+        throw new Error('Cannot route ' + req.method + ' ' + req.url);
+    }
+    /**
+     * Add a new route.
+     *
+     * @param method The method
+     * @param pattern The pattern
+     * @param callback The callback
+     */
+    _add(method, pattern, callback) {
+        if (typeof pattern === 'string') {
+            pattern = new RegExp(pattern);
+        }
+        this._routes.push({
+            method,
+            pattern,
+            callback,
+        });
+    }
+}
+//# sourceMappingURL=router.js.map
\ No newline at end of file
diff --git a/lib/router.js.map b/lib/router.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..3280594955f81bde971fceb94f682c23a6f5df48
--- /dev/null
+++ b/lib/router.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"router.js","sourceRoot":"","sources":["../src/router.ts"],"names":[],"mappings":"AAEA;;GAEG;AACH,MAAM,OAAO,MAAM;IAAnB;QAuHU,YAAO,GAAoB,EAAE,CAAC;IACxC,CAAC;IAvHC;;;;;;OAMG;IACH,GAAG,CAAC,OAAwB,EAAE,QAAyB;QACrD,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;IACtC,CAAC;IAED;;;;;;OAMG;IACH,GAAG,CAAC,OAAwB,EAAE,QAAyB;QACrD,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;IACtC,CAAC;IAED;;;;;;OAMG;IACH,IAAI,CAAC,OAAwB,EAAE,QAAyB;QACtD,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;IACvC,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,OAAwB,EAAE,QAAyB;QACvD,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;IACxC,CAAC;IAED;;;;;;OAMG;IACH,MAAM,CAAC,OAAwB,EAAE,QAAyB;QACxD,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;IACzC,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,KAAK,CAAC,GAAY;QACtB,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC7B,MAAM,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC;QACvB,MAAM,EAAE,QAAQ,EAAE,GAAG,GAAG,CAAC;QAEzB,KAAK,MAAM,CAAC,IAAI,IAAI,CAAC,OAAO,EAAE;YAC5B,IAAI,CAAC,CAAC,MAAM,KAAK,MAAM,EAAE;gBACvB,SAAS;aACV;YACD,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;YACxC,IAAI,CAAC,KAAK,EAAE;gBACV,SAAS;aACV;YACD,MAAM,OAAO,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC/B,IAAI,IAAI,CAAC;YACT,IAAI,CAAC,CAAC,MAAM,KAAK,OAAO,IAAI,CAAC,CAAC,MAAM,KAAK,KAAK,IAAI,CAAC,CAAC,MAAM,KAAK,MAAM,EAAE;gBACrE,IAAI;oBACF,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;iBACrC;gBAAC,MAAM;oBACN,IAAI,GAAG,SAAS,CAAC;iBAClB;aACF;YACD,OAAO,CAAC,CAAC,QAAQ,CAAC,IAAI,CACpB,IAAI,EACJ;gBACE,QAAQ;gBACR,IAAI;gBACJ,KAAK,EAAE,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,YAAY,CAAC;aAC5C,EACD,GAAG,OAAO,CACX,CAAC;SACH;QAED,MAAM,IAAI,KAAK,CAAC,eAAe,GAAG,GAAG,CAAC,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;IAChE,CAAC;IAED;;;;;;OAMG;IACK,IAAI,CACV,MAAqB,EACrB,OAAwB,EACxB,QAAyB;QAEzB,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;YAC/B,OAAO,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC;SAC/B;QACD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;YAChB,MAAM;YACN,OAAO;YACP,QAAQ;SACT,CAAC,CAAC;IACL,CAAC;CAGF"}
\ No newline at end of file
diff --git a/lib/service-manager.d.ts b/lib/service-manager.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..1e971bbe6be59fd990aa086e1428dd07708ee72e
--- /dev/null
+++ b/lib/service-manager.d.ts
@@ -0,0 +1,21 @@
+import { ISignal } from '@lumino/signaling';
+import { IServiceWorkerManager } from './tokens';
+export declare class ServiceWorkerManager implements IServiceWorkerManager {
+    constructor(options?: IServiceWorkerManager.IOptions);
+    /**
+     * A signal emitted when the registration changes.
+     */
+    get registrationChanged(): ISignal<IServiceWorkerManager, ServiceWorkerRegistration | null>;
+    /**
+     * Whether the ServiceWorker is enabled or not.
+     */
+    get enabled(): boolean;
+    get ready(): Promise<void>;
+    private unregisterOldServiceWorkers;
+    private initialize;
+    private _pingServiceWorker;
+    private _setRegistration;
+    private _registration;
+    private _registrationChanged;
+    private _ready;
+}
diff --git a/lib/service-manager.js b/lib/service-manager.js
new file mode 100644
index 0000000000000000000000000000000000000000..c282e39fe384a63025fa8035b86911e92f5c325f
--- /dev/null
+++ b/lib/service-manager.js
@@ -0,0 +1,96 @@
+import { PromiseDelegate } from '@lumino/coreutils';
+import { Signal } from '@lumino/signaling';
+import { PageConfig, URLExt } from '@jupyterlab/coreutils';
+import { WORKER_NAME } from './tokens';
+const VERSION = PageConfig.getOption('appVersion');
+const SW_PING_ENDPOINT = '/api/service-worker-heartbeat';
+export class ServiceWorkerManager {
+    constructor(options) {
+        var _a;
+        this.unregisterOldServiceWorkers = async (scriptURL) => {
+            const versionKey = `${scriptURL}-version`;
+            // Check if we have an installed version. If we do, compare it to the current version
+            // and unregister all service workers if they are different.
+            const installedVersion = localStorage.getItem(versionKey);
+            if ((installedVersion && installedVersion !== VERSION) || !installedVersion) {
+                // eslint-disable-next-line no-console
+                console.info('New version, unregistering existing service workers.');
+                const registrations = await navigator.serviceWorker.getRegistrations();
+                await Promise.all(registrations.map((registration) => registration.unregister()));
+                // eslint-disable-next-line no-console
+                console.info('All existing service workers have been unregistered.');
+            }
+            localStorage.setItem(versionKey, VERSION);
+        };
+        this._pingServiceWorker = async () => {
+            const response = await fetch(SW_PING_ENDPOINT);
+            const text = await response.text();
+            if (text === 'ok') {
+                setTimeout(this._pingServiceWorker, 20000);
+            }
+        };
+        this._registration = null;
+        this._registrationChanged = new Signal(this);
+        this._ready = new PromiseDelegate();
+        const workerUrl = (_a = options === null || options === void 0 ? void 0 : options.workerUrl) !== null && _a !== void 0 ? _a : URLExt.join(PageConfig.getBaseUrl(), WORKER_NAME);
+        const fullWorkerUrl = new URL(workerUrl, window.location.href);
+        const enableCache = PageConfig.getOption('enableServiceWorkerCache') || 'false';
+        fullWorkerUrl.searchParams.set('enableCache', enableCache);
+        void this.initialize(fullWorkerUrl.href).catch(console.warn);
+    }
+    /**
+     * A signal emitted when the registration changes.
+     */
+    get registrationChanged() {
+        return this._registrationChanged;
+    }
+    /**
+     * Whether the ServiceWorker is enabled or not.
+     */
+    get enabled() {
+        return this._registration !== null;
+    }
+    get ready() {
+        return this._ready.promise;
+    }
+    async initialize(workerUrl) {
+        const { serviceWorker } = navigator;
+        let registration = null;
+        if (!serviceWorker) {
+            console.warn('ServiceWorkers not supported in this browser');
+        }
+        else if (serviceWorker.controller) {
+            const scriptURL = serviceWorker.controller.scriptURL;
+            await this.unregisterOldServiceWorkers(scriptURL);
+            registration = (await serviceWorker.getRegistration(scriptURL)) || null;
+            // eslint-disable-next-line no-console
+            console.info('JupyterLite ServiceWorker was already registered');
+        }
+        if (!registration && serviceWorker) {
+            try {
+                // eslint-disable-next-line no-console
+                console.info('Registering new JupyterLite ServiceWorker', workerUrl);
+                registration = await serviceWorker.register(workerUrl);
+                // eslint-disable-next-line no-console
+                console.info('JupyterLite ServiceWorker was sucessfully registered');
+            }
+            catch (err) {
+                console.warn(err);
+                console.warn(`JupyterLite ServiceWorker registration unexpectedly failed: ${err}`);
+            }
+        }
+        this._setRegistration(registration);
+        if (!registration) {
+            this._ready.reject(void 0);
+        }
+        else {
+            this._ready.resolve(void 0);
+            setTimeout(this._pingServiceWorker, 20000);
+        }
+    }
+    _setRegistration(registration) {
+        this._registration = registration;
+        this._registrationChanged.emit(this._registration);
+    }
+}
+//# sourceMappingURL=service-manager.js.map
\ No newline at end of file
diff --git a/lib/service-manager.js.map b/lib/service-manager.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..4999506799679d94532f115abd277906cc7c2530
--- /dev/null
+++ b/lib/service-manager.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"service-manager.js","sourceRoot":"","sources":["../src/service-manager.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/lib/service-worker-manager.d.ts b/lib/service-worker-manager.d.ts
index 2504c6764ace42939d07c635792fad75116ff7c8..3d1802a471f2c6b75dcc8246f31aef8c62b6178a 100644
--- a/lib/service-worker-manager.d.ts
+++ b/lib/service-worker-manager.d.ts
@@ -1,8 +1,8 @@
 import { ISignal } from '@lumino/signaling';
-import { TDriveMethod, TDriveRequest } from '@jupyterlite/contents';
 import { IServiceWorkerManager } from './tokens';
 /**
- * A class that manages the Service Worker.
+ * A class that manages the ServiceWorker registration and communication,
+ * used for accessing the file system.
  */
 export declare class ServiceWorkerManager implements IServiceWorkerManager {
     /**
@@ -18,32 +18,38 @@ export declare class ServiceWorkerManager implements IServiceWorkerManager {
      */
     get enabled(): boolean;
     /**
-     * Whether the ServiceWorker is ready or not.
+     * The origin ID used for the broadcast channel communication.
      */
-    get ready(): Promise<void>;
+    get originId(): string;
     /**
-     * Handle a message received on the MessageChannel
+     * Whether the ServiceWorker is ready or not.
      */
-    protected _onMessage: <T extends TDriveMethod>(event: MessageEvent<TDriveRequest<T>>) => Promise<void>;
+    get ready(): Promise<void>;
     /**
-     * Initialize the Service Worker
+     * Initialize the ServiceWorkerManager.
      */
     private _initialize;
     /**
-     * Unregister previous service workers if the version has changed.
+     * Unregister old service workers if the version has changed.
      */
     private _unregisterOldServiceWorkers;
     /**
-     * Ping the Service Worker to keep it alive.
+     * Ping the service worker to keep it alive.
      */
     private _pingServiceWorker;
     /**
-     * Set the Service Worker registration.
+     * Set the registration and emit a signal.
      */
     private _setRegistration;
-    private _messageChannel;
+    /**
+     * Handle a message received on the BroadcastChannel
+     */
+    private _onBroadcastMessage;
     private _registration;
     private _registrationChanged;
     private _ready;
+    private _broadcastChannel;
+    private _originId;
+    private _contents;
     private _driveContentsProcessor;
 }
diff --git a/lib/service-worker-manager.js b/lib/service-worker-manager.js
index 542279ab2ce97254d61b3b223d3fee7ca8caac47..a792bcfc150705d612b15eb70ae2f6fee694adab 100644
--- a/lib/service-worker-manager.js
+++ b/lib/service-worker-manager.js
@@ -1,18 +1,19 @@
 import { PageConfig, URLExt } from '@jupyterlab/coreutils';
-import { PromiseDelegate } from '@lumino/coreutils';
+import { DRIVE_API_PATH, DriveContentsProcessor, } from '@jupyterlite/contents';
+import { PromiseDelegate, UUID } from '@lumino/coreutils';
 import { Signal } from '@lumino/signaling';
-import { DriveContentsProcessor, } from '@jupyterlite/contents';
 import { WORKER_NAME } from './tokens';
 /**
- * The version of the app.
+ * The version of the app
  */
 const VERSION = PageConfig.getOption('appVersion');
 /**
- * Used to keep the Service Worker alive.
+ * Used to keep the service worker alive
  */
 const SW_PING_ENDPOINT = '/api/service-worker-heartbeat';
 /**
- * A class that manages the Service Worker.
+ * A class that manages the ServiceWorker registration and communication,
+ * used for accessing the file system.
  */
 export class ServiceWorkerManager {
     /**
@@ -21,55 +22,36 @@ export class ServiceWorkerManager {
     constructor(options) {
         var _a;
         /**
-         * Handle a message received on the MessageChannel
+         * Handle a message received on the BroadcastChannel
          */
-        this._onMessage = async (event) => {
-            const request = event.data;
-            const response = await this._driveContentsProcessor.processDriveRequest(request);
-            this._messageChannel.port1.postMessage(response);
-        };
-        /**
-         * Unregister previous service workers if the version has changed.
-         */
-        this._unregisterOldServiceWorkers = async (scriptURL) => {
-            const versionKey = `${scriptURL}-version`;
-            // Check if we have an installed version. If we do, compare it to the current version
-            // and unregister all service workers if they are different.
-            const installedVersion = localStorage.getItem(versionKey);
-            if ((installedVersion && installedVersion !== VERSION) || !installedVersion) {
-                // eslint-disable-next-line no-console
-                console.info('New version, unregistering existing service workers.');
-                const registrations = await navigator.serviceWorker.getRegistrations();
-                await Promise.all(registrations.map((registration) => registration.unregister()));
-                // eslint-disable-next-line no-console
-                console.info('All existing service workers have been unregistered.');
+        this._onBroadcastMessage = async (event) => {
+            if (!this._broadcastChannel || !this._driveContentsProcessor) {
+                return;
             }
-            localStorage.setItem(versionKey, VERSION);
-        };
-        /**
-         * Ping the Service Worker to keep it alive.
-         */
-        this._pingServiceWorker = async () => {
-            const response = await fetch(SW_PING_ENDPOINT);
-            const text = await response.text();
-            if (text === 'ok') {
-                setTimeout(this._pingServiceWorker, 20000);
+            const request = event.data;
+            const originId = request === null || request === void 0 ? void 0 : request.originId;
+            if (originId !== this._originId) {
+                // Message is not meant for us
+                return;
             }
+            const response = await this._driveContentsProcessor.processDriveRequest(request);
+            this._broadcastChannel.postMessage(response);
         };
         this._registration = null;
         this._registrationChanged = new Signal(this);
         this._ready = new PromiseDelegate();
-        this._messageChannel = new MessageChannel();
-        // listen to messages from the Service Worker
-        this._messageChannel.port1.onmessage = this._onMessage;
-        const contents = options.contents;
-        this._driveContentsProcessor = new DriveContentsProcessor({
-            contentsManager: contents,
-        });
-        const workerUrl = (_a = options === null || options === void 0 ? void 0 : options.workerUrl) !== null && _a !== void 0 ? _a : URLExt.join(PageConfig.getBaseUrl(), WORKER_NAME);
+        const workerUrl = (_a = options.workerUrl) !== null && _a !== void 0 ? _a : URLExt.join(PageConfig.getBaseUrl(), WORKER_NAME);
         const fullWorkerUrl = new URL(workerUrl, window.location.href);
         const enableCache = PageConfig.getOption('enableServiceWorkerCache') || 'false';
         fullWorkerUrl.searchParams.set('enableCache', enableCache);
+        // Initialize broadcast channel related properties
+        this._originId = UUID.uuid4();
+        this._contents = options.contents;
+        this._broadcastChannel = new BroadcastChannel(DRIVE_API_PATH);
+        this._broadcastChannel.addEventListener('message', this._onBroadcastMessage);
+        this._driveContentsProcessor = new DriveContentsProcessor({
+            contentsManager: this._contents,
+        });
         void this._initialize(fullWorkerUrl.href).catch(console.warn);
     }
     /**
@@ -84,6 +66,12 @@ export class ServiceWorkerManager {
     get enabled() {
         return this._registration !== null;
     }
+    /**
+     * The origin ID used for the broadcast channel communication.
+     */
+    get originId() {
+        return this._originId;
+    }
     /**
      * Whether the ServiceWorker is ready or not.
      */
@@ -91,15 +79,13 @@ export class ServiceWorkerManager {
         return this._ready.promise;
     }
     /**
-     * Initialize the Service Worker
+     * Initialize the ServiceWorkerManager.
      */
     async _initialize(workerUrl) {
-        var _a;
         const { serviceWorker } = navigator;
         let registration = null;
         if (!serviceWorker) {
             console.warn('ServiceWorkers not supported in this browser');
-            this._ready.reject(void 0);
             return;
         }
         else if (serviceWorker.controller) {
@@ -123,10 +109,6 @@ export class ServiceWorkerManager {
             }
         }
         this._setRegistration(registration);
-        // transfer the port for communication with the Service Worker
-        void ((_a = serviceWorker.controller) === null || _a === void 0 ? void 0 : _a.postMessage({
-            type: 'INIT_PORT',
-        }, [this._messageChannel.port2]));
         if (!registration) {
             this._ready.reject(void 0);
         }
@@ -136,7 +118,35 @@ export class ServiceWorkerManager {
         }
     }
     /**
-     * Set the Service Worker registration.
+     * Unregister old service workers if the version has changed.
+     */
+    async _unregisterOldServiceWorkers(scriptURL) {
+        const versionKey = `${scriptURL}-version`;
+        // Check if we have an installed version. If we do, compare it to the current version
+        // and unregister all service workers if they are different.
+        const installedVersion = localStorage.getItem(versionKey);
+        if ((installedVersion && installedVersion !== VERSION) || !installedVersion) {
+            // eslint-disable-next-line no-console
+            console.info('New version, unregistering existing service workers.');
+            const registrations = await navigator.serviceWorker.getRegistrations();
+            await Promise.all(registrations.map((registration) => registration.unregister()));
+            // eslint-disable-next-line no-console
+            console.info('All existing service workers have been unregistered.');
+        }
+        localStorage.setItem(versionKey, VERSION);
+    }
+    /**
+     * Ping the service worker to keep it alive.
+     */
+    async _pingServiceWorker() {
+        const response = await fetch(SW_PING_ENDPOINT);
+        const text = await response.text();
+        if (text === 'ok') {
+            setTimeout(this._pingServiceWorker, 20000);
+        }
+    }
+    /**
+     * Set the registration and emit a signal.
      */
     _setRegistration(registration) {
         this._registration = registration;
diff --git a/lib/service-worker-manager.js.map b/lib/service-worker-manager.js.map
index d6fcd6020a56abb3c27c1ef9cbf9fa70f9e8bce2..da92f5cd37906488a9d6686becdc7aaeda302dad 100644
--- a/lib/service-worker-manager.js.map
+++ b/lib/service-worker-manager.js.map
@@ -1 +1 @@
-{"version":3,"file":"service-worker-manager.js","sourceRoot":"","sources":["../src/service-worker-manager.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"service-worker-manager.js","sourceRoot":"","sources":["../src/service-worker-manager.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/lib/service-worker.d.ts b/lib/service-worker.d.ts
index e6d76a8d4e64ed162caaf4fcbb061450fcfca90e..cb79c4b090c4f42fd9b7c0c78d182244e36d7aeb 100644
--- a/lib/service-worker.d.ts
+++ b/lib/service-worker.d.ts
@@ -6,8 +6,7 @@ declare const CACHE = "precache";
 /**
  * Communication channel for drive access
  */
-declare let messagePort: MessagePort;
-declare const ready: Promise<void>;
+declare const broadcast: BroadcastChannel;
 /**
  * Whether to enable the cache
  */
diff --git a/lib/service-worker.js b/lib/service-worker.js
index cc620fb9531b8dc3f08e788de0de5dba562b5e92..ab0dff749d282eadf761fb79a389dcfd0bea1021 100644
--- a/lib/service-worker.js
+++ b/lib/service-worker.js
@@ -8,15 +8,7 @@ const CACHE = 'precache';
 /**
  * Communication channel for drive access
  */
-let messagePort;
-const ready = new Promise((resolve) => {
-    self.addEventListener('message', (event) => {
-        if (event.data && event.data.type === 'INIT_PORT') {
-            messagePort = event.ports[0];
-            resolve();
-        }
-    });
-});
+const broadcast = new BroadcastChannel('/api/drive.v1');
 /**
  * Whether to enable the cache
  */
@@ -120,14 +112,13 @@ function shouldDrop(request, url) {
  * Forward request to main using the broadcast channel
  */
 async function broadcastOne(request) {
-    await ready;
     const promise = new Promise((resolve) => {
-        messagePort.onmessage = (event) => {
+        broadcast.onmessage = (event) => {
             resolve(new Response(JSON.stringify(event.data)));
         };
     });
     const message = await request.json();
-    messagePort.postMessage(message);
+    broadcast.postMessage(message);
     return await promise;
 }
 async function openCache() {
diff --git a/lib/service-worker.js.map b/lib/service-worker.js.map
index 1b9e840faf29633cf98dea6f2dcf5ef482142bb9..d1e41f5a33476e020a66b77759cac357637abdd9 100644
--- a/lib/service-worker.js.map
+++ b/lib/service-worker.js.map
@@ -1 +1 @@
-{"version":3,"file":"service-worker.js","sourceRoot":"","sources":["../src/service-worker.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"service-worker.js","sourceRoot":"","sources":["../src/service-worker.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/lib/status.d.ts b/lib/status.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..7e3ae379567d153121467c5b67ecbef20fb854f2
--- /dev/null
+++ b/lib/status.d.ts
@@ -0,0 +1,18 @@
+/**
+ * A class to handle requests to /api/status
+ */
+export declare class Status {
+    /**
+     * Get the status
+     */
+    get(): any;
+}
+/**
+ * A namespace for Status statics.
+ */
+export declare namespace Status {
+    /**
+     * The url for the status service.
+     */
+    const STATUS_SERVICE_URL = "/api/status";
+}
diff --git a/lib/status.js b/lib/status.js
new file mode 100644
index 0000000000000000000000000000000000000000..a4528f19786bc2f199f7d7ea87eec8a8737f2678
--- /dev/null
+++ b/lib/status.js
@@ -0,0 +1,21 @@
+/**
+ * A class to handle requests to /api/status
+ */
+export class Status {
+    /**
+     * Get the status
+     */
+    get() {
+        return {};
+    }
+}
+/**
+ * A namespace for Status statics.
+ */
+(function (Status) {
+    /**
+     * The url for the status service.
+     */
+    Status.STATUS_SERVICE_URL = '/api/status';
+})(Status || (Status = {}));
+//# sourceMappingURL=status.js.map
\ No newline at end of file
diff --git a/lib/status.js.map b/lib/status.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..b9d0c6aa4c7957bcc7ee714f5e63486390a97b2b
--- /dev/null
+++ b/lib/status.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"status.js","sourceRoot":"","sources":["../src/status.ts"],"names":[],"mappings":"AAAA;;GAEG;AACH,MAAM,OAAO,MAAM;IACjB;;OAEG;IACH,GAAG;QACD,OAAO,EAAE,CAAC;IACZ,CAAC;CACF;AAED;;GAEG;AACH,WAAiB,MAAM;IACrB;;OAEG;IACU,yBAAkB,GAAG,aAAa,CAAC;AAClD,CAAC,EALgB,MAAM,KAAN,MAAM,QAKtB"}
\ No newline at end of file
diff --git a/lib/tokens.d.ts b/lib/tokens.d.ts
index 1aa18a81b54966381567d45bf82197dea050784d..719cd20f943f979f1e26fc5dda228aea10639683 100644
--- a/lib/tokens.d.ts
+++ b/lib/tokens.d.ts
@@ -1,6 +1,6 @@
-import { Contents } from '@jupyterlab/services';
 import { Token } from '@lumino/coreutils';
 import { ISignal } from '@lumino/signaling';
+import { Contents } from '@jupyterlab/services';
 /**
  * The token for the ServiceWorker.
  */
@@ -17,6 +17,10 @@ export interface IServiceWorkerManager {
      * Whether the ServiceWorker is enabled or not.
      */
     readonly enabled: boolean;
+    /**
+     * The unique ID that identifies this broadcast channel instance.
+     */
+    readonly originId: string;
     /**
      * A Promise that resolves when the ServiceWorker is registered, or rejects if it cannot
      */
@@ -31,7 +35,7 @@ export declare namespace IServiceWorkerManager {
      */
     interface IOptions {
         /**
-         * The JupyterLab contents manager
+         * The contents manager to use for handling drive contents requests
          */
         contents: Contents.IManager;
         /**
diff --git a/lib/tokens.js.map b/lib/tokens.js.map
index 7243c402cd68047ef8130309c874aacbfc175a5b..7eb6293c57a3e9041030e7e59681f90d1d50a070 100644
--- a/lib/tokens.js.map
+++ b/lib/tokens.js.map
@@ -1 +1 @@
-{"version":3,"file":"tokens.js","sourceRoot":"","sources":["../src/tokens.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,KAAK,EAAE,MAAM,mBAAmB,CAAC;AAI1C,OAAO,MAAM,MAAM,uBAAuB,CAAC;AAE3C;;GAEG;AACH,MAAM,CAAC,MAAM,qBAAqB,GAAG,IAAI,KAAK,CAC5C,2CAA2C,CAC5C,CAAC;AA6CF,MAAM,CAAC,MAAM,WAAW,GAAG,GAAG,MAAM,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC"}
\ No newline at end of file
+{"version":3,"file":"tokens.js","sourceRoot":"","sources":["../src/tokens.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,mBAAmB,CAAC;AAM1C,OAAO,MAAM,MAAM,uBAAuB,CAAC;AAE3C;;GAEG;AACH,MAAM,CAAC,MAAM,qBAAqB,GAAG,IAAI,KAAK,CAC5C,2CAA2C,CAC5C,CAAC;AAkDF,MAAM,CAAC,MAAM,WAAW,GAAG,GAAG,MAAM,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC"}
\ No newline at end of file
diff --git a/src/service-worker-manager.ts b/src/service-worker-manager.ts
index f057fc3acec1d986ce475dbd3f6593decb1988e4..69771ab2b0f968d47d3777a18b36a5579d19d4a1 100644
--- a/src/service-worker-manager.ts
+++ b/src/service-worker-manager.ts
@@ -1,51 +1,55 @@
 import { PageConfig, URLExt } from '@jupyterlab/coreutils';
 
-import { PromiseDelegate } from '@lumino/coreutils';
-
-import { ISignal, Signal } from '@lumino/signaling';
+import { Contents } from '@jupyterlab/services';
 
 import {
+  DRIVE_API_PATH,
   DriveContentsProcessor,
-  IDriveContentsProcessor,
   TDriveMethod,
   TDriveRequest,
 } from '@jupyterlite/contents';
 
+import { PromiseDelegate, UUID } from '@lumino/coreutils';
+
+import { ISignal, Signal } from '@lumino/signaling';
+
 import { IServiceWorkerManager, WORKER_NAME } from './tokens';
 
 /**
- * The version of the app.
+ * The version of the app
  */
 const VERSION = PageConfig.getOption('appVersion');
 
 /**
- * Used to keep the Service Worker alive.
+ * Used to keep the service worker alive
  */
 const SW_PING_ENDPOINT = '/api/service-worker-heartbeat';
 
 /**
- * A class that manages the Service Worker.
+ * A class that manages the ServiceWorker registration and communication,
+ * used for accessing the file system.
  */
 export class ServiceWorkerManager implements IServiceWorkerManager {
   /**
    * Construct a new ServiceWorkerManager.
    */
   constructor(options: IServiceWorkerManager.IOptions) {
-    this._messageChannel = new MessageChannel();
+    const workerUrl =
+      options.workerUrl ?? URLExt.join(PageConfig.getBaseUrl(), WORKER_NAME);
+    const fullWorkerUrl = new URL(workerUrl, window.location.href);
+    const enableCache = PageConfig.getOption('enableServiceWorkerCache') || 'false';
+    fullWorkerUrl.searchParams.set('enableCache', enableCache);
 
-    // listen to messages from the Service Worker
-    this._messageChannel.port1.onmessage = this._onMessage;
+    // Initialize broadcast channel related properties
+    this._originId = UUID.uuid4();
+    this._contents = options.contents;
+    this._broadcastChannel = new BroadcastChannel(DRIVE_API_PATH);
+    this._broadcastChannel.addEventListener('message', this._onBroadcastMessage);
 
-    const contents = options.contents;
     this._driveContentsProcessor = new DriveContentsProcessor({
-      contentsManager: contents,
+      contentsManager: this._contents,
     });
 
-    const workerUrl =
-      options?.workerUrl ?? URLExt.join(PageConfig.getBaseUrl(), WORKER_NAME);
-    const fullWorkerUrl = new URL(workerUrl, window.location.href);
-    const enableCache = PageConfig.getOption('enableServiceWorkerCache') || 'false';
-    fullWorkerUrl.searchParams.set('enableCache', enableCache);
     void this._initialize(fullWorkerUrl.href).catch(console.warn);
   }
 
@@ -67,26 +71,21 @@ export class ServiceWorkerManager implements IServiceWorkerManager {
   }
 
   /**
-   * Whether the ServiceWorker is ready or not.
+   * The origin ID used for the broadcast channel communication.
    */
-  get ready(): Promise<void> {
-    return this._ready.promise;
+  get originId(): string {
+    return this._originId;
   }
 
   /**
-   * Handle a message received on the MessageChannel
+   * Whether the ServiceWorker is ready or not.
    */
-  protected _onMessage = async <T extends TDriveMethod>(
-    event: MessageEvent<TDriveRequest<T>>,
-  ): Promise<void> => {
-    const request = event.data;
-    const response = await this._driveContentsProcessor.processDriveRequest(request);
-
-    this._messageChannel.port1.postMessage(response);
-  };
+  get ready(): Promise<void> {
+    return this._ready.promise;
+  }
 
   /**
-   * Initialize the Service Worker
+   * Initialize the ServiceWorkerManager.
    */
   private async _initialize(workerUrl: string): Promise<void> {
     const { serviceWorker } = navigator;
@@ -95,7 +94,6 @@ export class ServiceWorkerManager implements IServiceWorkerManager {
 
     if (!serviceWorker) {
       console.warn('ServiceWorkers not supported in this browser');
-      this._ready.reject(void 0);
       return;
     } else if (serviceWorker.controller) {
       const scriptURL = serviceWorker.controller.scriptURL;
@@ -123,14 +121,6 @@ export class ServiceWorkerManager implements IServiceWorkerManager {
 
     this._setRegistration(registration);
 
-    // transfer the port for communication with the Service Worker
-    void serviceWorker.controller?.postMessage(
-      {
-        type: 'INIT_PORT',
-      },
-      [this._messageChannel.port2],
-    );
-
     if (!registration) {
       this._ready.reject(void 0);
     } else {
@@ -140,9 +130,9 @@ export class ServiceWorkerManager implements IServiceWorkerManager {
   }
 
   /**
-   * Unregister previous service workers if the version has changed.
+   * Unregister old service workers if the version has changed.
    */
-  private _unregisterOldServiceWorkers = async (scriptURL: string) => {
+  private async _unregisterOldServiceWorkers(scriptURL: string): Promise<void> {
     const versionKey = `${scriptURL}-version`;
     // Check if we have an installed version. If we do, compare it to the current version
     // and unregister all service workers if they are different.
@@ -160,32 +150,56 @@ export class ServiceWorkerManager implements IServiceWorkerManager {
     }
 
     localStorage.setItem(versionKey, VERSION);
-  };
+  }
 
   /**
-   * Ping the Service Worker to keep it alive.
+   * Ping the service worker to keep it alive.
    */
-  private _pingServiceWorker = async (): Promise<void> => {
+  private async _pingServiceWorker(): Promise<void> {
     const response = await fetch(SW_PING_ENDPOINT);
     const text = await response.text();
     if (text === 'ok') {
       setTimeout(this._pingServiceWorker, 20000);
     }
-  };
+  }
 
   /**
-   * Set the Service Worker registration.
+   * Set the registration and emit a signal.
    */
   private _setRegistration(registration: ServiceWorkerRegistration | null) {
     this._registration = registration;
     this._registrationChanged.emit(this._registration);
   }
 
-  private _messageChannel: MessageChannel;
+  /**
+   * Handle a message received on the BroadcastChannel
+   */
+  private _onBroadcastMessage = async <T extends TDriveMethod>(
+    event: MessageEvent<TDriveRequest<T>>,
+  ): Promise<void> => {
+    if (!this._broadcastChannel || !this._driveContentsProcessor) {
+      return;
+    }
+
+    const request = event.data;
+    const originId = request?.originId;
+
+    if (originId !== this._originId) {
+      // Message is not meant for us
+      return;
+    }
+
+    const response = await this._driveContentsProcessor.processDriveRequest(request);
+    this._broadcastChannel.postMessage(response);
+  };
+
   private _registration: ServiceWorkerRegistration | null = null;
   private _registrationChanged = new Signal<this, ServiceWorkerRegistration | null>(
     this,
   );
   private _ready = new PromiseDelegate<void>();
-  private _driveContentsProcessor: IDriveContentsProcessor;
+  private _broadcastChannel: BroadcastChannel;
+  private _originId: string;
+  private _contents: Contents.IManager | undefined;
+  private _driveContentsProcessor: DriveContentsProcessor | undefined;
 }
diff --git a/src/service-worker.ts b/src/service-worker.ts
index 012eb45ac2269aac5bf545ef06875940c3d888b0..d6d0131301e25bac6ff34345c0dfdddab1ec873e 100644
--- a/src/service-worker.ts
+++ b/src/service-worker.ts
@@ -9,16 +9,7 @@ const CACHE = 'precache';
 /**
  * Communication channel for drive access
  */
-let messagePort: MessagePort;
-
-const ready: Promise<void> = new Promise((resolve) => {
-  self.addEventListener('message', (event: ExtendableMessageEvent) => {
-    if (event.data && event.data.type === 'INIT_PORT') {
-      messagePort = event.ports[0];
-      resolve();
-    }
-  });
-});
+const broadcast = new BroadcastChannel('/api/drive.v1');
 
 /**
  * Whether to enable the cache
@@ -144,16 +135,14 @@ function shouldDrop(request: Request, url: URL): boolean {
  * Forward request to main using the broadcast channel
  */
 async function broadcastOne(request: Request): Promise<Response> {
-  await ready;
-
   const promise = new Promise<Response>((resolve) => {
-    messagePort.onmessage = (event) => {
+    broadcast.onmessage = (event) => {
       resolve(new Response(JSON.stringify(event.data)));
     };
   });
 
   const message = await request.json();
-  messagePort.postMessage(message);
+  broadcast.postMessage(message);
 
   return await promise;
 }
diff --git a/src/tokens.ts b/src/tokens.ts
index 84aaae1ebbf0ee5c6ac91ee60077b3e41cf9d043..aae3f63f95128bd7fa099b1faf69f91c931d3d2e 100644
--- a/src/tokens.ts
+++ b/src/tokens.ts
@@ -1,9 +1,9 @@
-import { Contents } from '@jupyterlab/services';
-
 import { Token } from '@lumino/coreutils';
 
 import { ISignal } from '@lumino/signaling';
 
+import { Contents } from '@jupyterlab/services';
+
 import SW_URL from './service-worker?text';
 
 /**
@@ -30,6 +30,11 @@ export interface IServiceWorkerManager {
    */
   readonly enabled: boolean;
 
+  /**
+   * The unique ID that identifies this broadcast channel instance.
+   */
+  readonly originId: string;
+
   /**
    * A Promise that resolves when the ServiceWorker is registered, or rejects if it cannot
    */
@@ -45,7 +50,7 @@ export namespace IServiceWorkerManager {
    */
   export interface IOptions {
     /**
-     * The JupyterLab contents manager
+     * The contents manager to use for handling drive contents requests
      */
     contents: Contents.IManager;
 
